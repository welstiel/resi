/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GetCharactersCharacterIdOk : 200 ok object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdOk {
    /// The character's alliance ID
    #[serde(rename = "alliance_id", skip_serializing_if = "Option::is_none")]
    pub alliance_id: Option<i32>,
    /// Creation date of the character
    #[serde(rename = "birthday")]
    pub birthday: String,
    /// bloodline_id integer
    #[serde(rename = "bloodline_id")]
    pub bloodline_id: i32,
    /// The character's corporation ID
    #[serde(rename = "corporation_id")]
    pub corporation_id: i32,
    /// description string
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// ID of the faction the character is fighting for, if the character is enlisted in Factional Warfare
    #[serde(rename = "faction_id", skip_serializing_if = "Option::is_none")]
    pub faction_id: Option<i32>,
    /// gender string
    #[serde(rename = "gender")]
    pub gender: Gender,
    /// name string
    #[serde(rename = "name")]
    pub name: String,
    /// race_id integer
    #[serde(rename = "race_id")]
    pub race_id: i32,
    /// security_status number
    #[serde(rename = "security_status", skip_serializing_if = "Option::is_none")]
    pub security_status: Option<f32>,
    /// The individual title of the character
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

impl GetCharactersCharacterIdOk {
    /// 200 ok object
    pub fn new(birthday: String, bloodline_id: i32, corporation_id: i32, gender: Gender, name: String, race_id: i32) -> GetCharactersCharacterIdOk {
        GetCharactersCharacterIdOk {
            alliance_id: None,
            birthday,
            bloodline_id,
            corporation_id,
            description: None,
            faction_id: None,
            gender,
            name,
            race_id,
            security_status: None,
            title: None,
        }
    }
}

/// gender string
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "female")]
    Female,
    #[serde(rename = "male")]
    Male,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::Female
    }
}

