/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GetFleetsFleetIdMembers200Ok : 200 ok object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetFleetsFleetIdMembers200Ok {
    /// character_id integer
    #[serde(rename = "character_id")]
    pub character_id: i32,
    /// join_time string
    #[serde(rename = "join_time")]
    pub join_time: String,
    /// Member’s role in fleet
    #[serde(rename = "role")]
    pub role: Role,
    /// Localized role names
    #[serde(rename = "role_name")]
    pub role_name: String,
    /// ship_type_id integer
    #[serde(rename = "ship_type_id")]
    pub ship_type_id: i32,
    /// Solar system the member is located in
    #[serde(rename = "solar_system_id")]
    pub solar_system_id: i32,
    /// ID of the squad the member is in. If not applicable, will be set to -1
    #[serde(rename = "squad_id")]
    pub squad_id: i64,
    /// Station in which the member is docked in, if applicable
    #[serde(rename = "station_id", skip_serializing_if = "Option::is_none")]
    pub station_id: Option<i64>,
    /// Whether the member take fleet warps
    #[serde(rename = "takes_fleet_warp")]
    pub takes_fleet_warp: bool,
    /// ID of the wing the member is in. If not applicable, will be set to -1
    #[serde(rename = "wing_id")]
    pub wing_id: i64,
}

impl GetFleetsFleetIdMembers200Ok {
    /// 200 ok object
    pub fn new(character_id: i32, join_time: String, role: Role, role_name: String, ship_type_id: i32, solar_system_id: i32, squad_id: i64, takes_fleet_warp: bool, wing_id: i64) -> GetFleetsFleetIdMembers200Ok {
        GetFleetsFleetIdMembers200Ok {
            character_id,
            join_time,
            role,
            role_name,
            ship_type_id,
            solar_system_id,
            squad_id,
            station_id: None,
            takes_fleet_warp,
            wing_id,
        }
    }
}

/// Member’s role in fleet
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "fleet_commander")]
    FleetCommander,
    #[serde(rename = "wing_commander")]
    WingCommander,
    #[serde(rename = "squad_commander")]
    SquadCommander,
    #[serde(rename = "squad_member")]
    SquadMember,
}

impl Default for Role {
    fn default() -> Role {
        Self::FleetCommander
    }
}

