/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GetCorporationsCorporationIdStarbases200Ok : 200 ok object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdStarbases200Ok {
    /// The moon this starbase (POS) is anchored on, unanchored POSes do not have this information
    #[serde(rename = "moon_id", skip_serializing_if = "Option::is_none")]
    pub moon_id: Option<i32>,
    /// When the POS onlined, for starbases (POSes) in online state
    #[serde(rename = "onlined_since", skip_serializing_if = "Option::is_none")]
    pub onlined_since: Option<String>,
    /// When the POS will be out of reinforcement, for starbases (POSes) in reinforced state
    #[serde(rename = "reinforced_until", skip_serializing_if = "Option::is_none")]
    pub reinforced_until: Option<String>,
    /// Unique ID for this starbase (POS)
    #[serde(rename = "starbase_id")]
    pub starbase_id: i64,
    /// state string
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The solar system this starbase (POS) is in, unanchored POSes have this information
    #[serde(rename = "system_id")]
    pub system_id: i32,
    /// Starbase (POS) type
    #[serde(rename = "type_id")]
    pub type_id: i32,
    /// When the POS started unanchoring, for starbases (POSes) in unanchoring state
    #[serde(rename = "unanchor_at", skip_serializing_if = "Option::is_none")]
    pub unanchor_at: Option<String>,
}

impl GetCorporationsCorporationIdStarbases200Ok {
    /// 200 ok object
    pub fn new(starbase_id: i64, system_id: i32, type_id: i32) -> GetCorporationsCorporationIdStarbases200Ok {
        GetCorporationsCorporationIdStarbases200Ok {
            moon_id: None,
            onlined_since: None,
            reinforced_until: None,
            starbase_id,
            state: None,
            system_id,
            type_id,
            unanchor_at: None,
        }
    }
}

/// state string
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "offline")]
    Offline,
    #[serde(rename = "online")]
    Online,
    #[serde(rename = "onlining")]
    Onlining,
    #[serde(rename = "reinforced")]
    Reinforced,
    #[serde(rename = "unanchoring")]
    Unanchoring,
}

impl Default for State {
    fn default() -> State {
        Self::Offline
    }
}

