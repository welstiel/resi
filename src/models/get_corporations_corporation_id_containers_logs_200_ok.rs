/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GetCorporationsCorporationIdContainersLogs200Ok : 200 ok object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdContainersLogs200Ok {
    /// action string
    #[serde(rename = "action")]
    pub action: Action,
    /// ID of the character who performed the action.
    #[serde(rename = "character_id")]
    pub character_id: i32,
    /// ID of the container
    #[serde(rename = "container_id")]
    pub container_id: i64,
    /// Type ID of the container
    #[serde(rename = "container_type_id")]
    pub container_type_id: i32,
    /// location_flag string
    #[serde(rename = "location_flag")]
    pub location_flag: LocationFlag,
    /// location_id integer
    #[serde(rename = "location_id")]
    pub location_id: i64,
    /// Timestamp when this log was created
    #[serde(rename = "logged_at")]
    pub logged_at: String,
    /// new_config_bitmask integer
    #[serde(rename = "new_config_bitmask", skip_serializing_if = "Option::is_none")]
    pub new_config_bitmask: Option<i32>,
    /// old_config_bitmask integer
    #[serde(rename = "old_config_bitmask", skip_serializing_if = "Option::is_none")]
    pub old_config_bitmask: Option<i32>,
    /// Type of password set if action is of type SetPassword or EnterPassword
    #[serde(rename = "password_type", skip_serializing_if = "Option::is_none")]
    pub password_type: Option<PasswordType>,
    /// Quantity of the item being acted upon
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<i32>,
    /// Type ID of the item being acted upon
    #[serde(rename = "type_id", skip_serializing_if = "Option::is_none")]
    pub type_id: Option<i32>,
}

impl GetCorporationsCorporationIdContainersLogs200Ok {
    /// 200 ok object
    pub fn new(action: Action, character_id: i32, container_id: i64, container_type_id: i32, location_flag: LocationFlag, location_id: i64, logged_at: String) -> GetCorporationsCorporationIdContainersLogs200Ok {
        GetCorporationsCorporationIdContainersLogs200Ok {
            action,
            character_id,
            container_id,
            container_type_id,
            location_flag,
            location_id,
            logged_at,
            new_config_bitmask: None,
            old_config_bitmask: None,
            password_type: None,
            quantity: None,
            type_id: None,
        }
    }
}

/// action string
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "add")]
    Add,
    #[serde(rename = "assemble")]
    Assemble,
    #[serde(rename = "configure")]
    Configure,
    #[serde(rename = "enter_password")]
    EnterPassword,
    #[serde(rename = "lock")]
    Lock,
    #[serde(rename = "move")]
    _Move,
    #[serde(rename = "repackage")]
    Repackage,
    #[serde(rename = "set_name")]
    SetName,
    #[serde(rename = "set_password")]
    SetPassword,
    #[serde(rename = "unlock")]
    Unlock,
}

impl Default for Action {
    fn default() -> Action {
        Self::Add
    }
}
/// location_flag string
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LocationFlag {
    #[serde(rename = "AssetSafety")]
    AssetSafety,
    #[serde(rename = "AutoFit")]
    AutoFit,
    #[serde(rename = "Bonus")]
    Bonus,
    #[serde(rename = "Booster")]
    Booster,
    #[serde(rename = "BoosterBay")]
    BoosterBay,
    #[serde(rename = "Capsule")]
    Capsule,
    #[serde(rename = "Cargo")]
    Cargo,
    #[serde(rename = "CorpDeliveries")]
    CorpDeliveries,
    #[serde(rename = "CorpSAG1")]
    CorpSAG1,
    #[serde(rename = "CorpSAG2")]
    CorpSAG2,
    #[serde(rename = "CorpSAG3")]
    CorpSAG3,
    #[serde(rename = "CorpSAG4")]
    CorpSAG4,
    #[serde(rename = "CorpSAG5")]
    CorpSAG5,
    #[serde(rename = "CorpSAG6")]
    CorpSAG6,
    #[serde(rename = "CorpSAG7")]
    CorpSAG7,
    #[serde(rename = "CrateLoot")]
    CrateLoot,
    #[serde(rename = "Deliveries")]
    Deliveries,
    #[serde(rename = "DroneBay")]
    DroneBay,
    #[serde(rename = "DustBattle")]
    DustBattle,
    #[serde(rename = "DustDatabank")]
    DustDatabank,
    #[serde(rename = "FighterBay")]
    FighterBay,
    #[serde(rename = "FighterTube0")]
    FighterTube0,
    #[serde(rename = "FighterTube1")]
    FighterTube1,
    #[serde(rename = "FighterTube2")]
    FighterTube2,
    #[serde(rename = "FighterTube3")]
    FighterTube3,
    #[serde(rename = "FighterTube4")]
    FighterTube4,
    #[serde(rename = "FleetHangar")]
    FleetHangar,
    #[serde(rename = "FrigateEscapeBay")]
    FrigateEscapeBay,
    #[serde(rename = "Hangar")]
    Hangar,
    #[serde(rename = "HangarAll")]
    HangarAll,
    #[serde(rename = "HiSlot0")]
    HiSlot0,
    #[serde(rename = "HiSlot1")]
    HiSlot1,
    #[serde(rename = "HiSlot2")]
    HiSlot2,
    #[serde(rename = "HiSlot3")]
    HiSlot3,
    #[serde(rename = "HiSlot4")]
    HiSlot4,
    #[serde(rename = "HiSlot5")]
    HiSlot5,
    #[serde(rename = "HiSlot6")]
    HiSlot6,
    #[serde(rename = "HiSlot7")]
    HiSlot7,
    #[serde(rename = "HiddenModifiers")]
    HiddenModifiers,
    #[serde(rename = "Implant")]
    Implant,
    #[serde(rename = "Impounded")]
    Impounded,
    #[serde(rename = "JunkyardReprocessed")]
    JunkyardReprocessed,
    #[serde(rename = "JunkyardTrashed")]
    JunkyardTrashed,
    #[serde(rename = "LoSlot0")]
    LoSlot0,
    #[serde(rename = "LoSlot1")]
    LoSlot1,
    #[serde(rename = "LoSlot2")]
    LoSlot2,
    #[serde(rename = "LoSlot3")]
    LoSlot3,
    #[serde(rename = "LoSlot4")]
    LoSlot4,
    #[serde(rename = "LoSlot5")]
    LoSlot5,
    #[serde(rename = "LoSlot6")]
    LoSlot6,
    #[serde(rename = "LoSlot7")]
    LoSlot7,
    #[serde(rename = "Locked")]
    Locked,
    #[serde(rename = "MedSlot0")]
    MedSlot0,
    #[serde(rename = "MedSlot1")]
    MedSlot1,
    #[serde(rename = "MedSlot2")]
    MedSlot2,
    #[serde(rename = "MedSlot3")]
    MedSlot3,
    #[serde(rename = "MedSlot4")]
    MedSlot4,
    #[serde(rename = "MedSlot5")]
    MedSlot5,
    #[serde(rename = "MedSlot6")]
    MedSlot6,
    #[serde(rename = "MedSlot7")]
    MedSlot7,
    #[serde(rename = "OfficeFolder")]
    OfficeFolder,
    #[serde(rename = "Pilot")]
    Pilot,
    #[serde(rename = "PlanetSurface")]
    PlanetSurface,
    #[serde(rename = "QuafeBay")]
    QuafeBay,
    #[serde(rename = "QuantumCoreRoom")]
    QuantumCoreRoom,
    #[serde(rename = "Reward")]
    Reward,
    #[serde(rename = "RigSlot0")]
    RigSlot0,
    #[serde(rename = "RigSlot1")]
    RigSlot1,
    #[serde(rename = "RigSlot2")]
    RigSlot2,
    #[serde(rename = "RigSlot3")]
    RigSlot3,
    #[serde(rename = "RigSlot4")]
    RigSlot4,
    #[serde(rename = "RigSlot5")]
    RigSlot5,
    #[serde(rename = "RigSlot6")]
    RigSlot6,
    #[serde(rename = "RigSlot7")]
    RigSlot7,
    #[serde(rename = "SecondaryStorage")]
    SecondaryStorage,
    #[serde(rename = "ServiceSlot0")]
    ServiceSlot0,
    #[serde(rename = "ServiceSlot1")]
    ServiceSlot1,
    #[serde(rename = "ServiceSlot2")]
    ServiceSlot2,
    #[serde(rename = "ServiceSlot3")]
    ServiceSlot3,
    #[serde(rename = "ServiceSlot4")]
    ServiceSlot4,
    #[serde(rename = "ServiceSlot5")]
    ServiceSlot5,
    #[serde(rename = "ServiceSlot6")]
    ServiceSlot6,
    #[serde(rename = "ServiceSlot7")]
    ServiceSlot7,
    #[serde(rename = "ShipHangar")]
    ShipHangar,
    #[serde(rename = "ShipOffline")]
    ShipOffline,
    #[serde(rename = "Skill")]
    Skill,
    #[serde(rename = "SkillInTraining")]
    SkillInTraining,
    #[serde(rename = "SpecializedAmmoHold")]
    SpecializedAmmoHold,
    #[serde(rename = "SpecializedCommandCenterHold")]
    SpecializedCommandCenterHold,
    #[serde(rename = "SpecializedFuelBay")]
    SpecializedFuelBay,
    #[serde(rename = "SpecializedGasHold")]
    SpecializedGasHold,
    #[serde(rename = "SpecializedIndustrialShipHold")]
    SpecializedIndustrialShipHold,
    #[serde(rename = "SpecializedLargeShipHold")]
    SpecializedLargeShipHold,
    #[serde(rename = "SpecializedMaterialBay")]
    SpecializedMaterialBay,
    #[serde(rename = "SpecializedMediumShipHold")]
    SpecializedMediumShipHold,
    #[serde(rename = "SpecializedMineralHold")]
    SpecializedMineralHold,
    #[serde(rename = "SpecializedOreHold")]
    SpecializedOreHold,
    #[serde(rename = "SpecializedPlanetaryCommoditiesHold")]
    SpecializedPlanetaryCommoditiesHold,
    #[serde(rename = "SpecializedSalvageHold")]
    SpecializedSalvageHold,
    #[serde(rename = "SpecializedShipHold")]
    SpecializedShipHold,
    #[serde(rename = "SpecializedSmallShipHold")]
    SpecializedSmallShipHold,
    #[serde(rename = "StructureActive")]
    StructureActive,
    #[serde(rename = "StructureFuel")]
    StructureFuel,
    #[serde(rename = "StructureInactive")]
    StructureInactive,
    #[serde(rename = "StructureOffline")]
    StructureOffline,
    #[serde(rename = "SubSystemBay")]
    SubSystemBay,
    #[serde(rename = "SubSystemSlot0")]
    SubSystemSlot0,
    #[serde(rename = "SubSystemSlot1")]
    SubSystemSlot1,
    #[serde(rename = "SubSystemSlot2")]
    SubSystemSlot2,
    #[serde(rename = "SubSystemSlot3")]
    SubSystemSlot3,
    #[serde(rename = "SubSystemSlot4")]
    SubSystemSlot4,
    #[serde(rename = "SubSystemSlot5")]
    SubSystemSlot5,
    #[serde(rename = "SubSystemSlot6")]
    SubSystemSlot6,
    #[serde(rename = "SubSystemSlot7")]
    SubSystemSlot7,
    #[serde(rename = "Unlocked")]
    Unlocked,
    #[serde(rename = "Wallet")]
    Wallet,
    #[serde(rename = "Wardrobe")]
    Wardrobe,
}

impl Default for LocationFlag {
    fn default() -> LocationFlag {
        Self::AssetSafety
    }
}
/// Type of password set if action is of type SetPassword or EnterPassword
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PasswordType {
    #[serde(rename = "config")]
    Config,
    #[serde(rename = "general")]
    General,
}

impl Default for PasswordType {
    fn default() -> PasswordType {
        Self::Config
    }
}

