/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GetContractsPublicRegionId200Ok : 200 ok object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetContractsPublicRegionId200Ok {
    /// Buyout price (for Auctions only)
    #[serde(rename = "buyout", skip_serializing_if = "Option::is_none")]
    pub buyout: Option<f64>,
    /// Collateral price (for Couriers only)
    #[serde(rename = "collateral", skip_serializing_if = "Option::is_none")]
    pub collateral: Option<f64>,
    /// contract_id integer
    #[serde(rename = "contract_id")]
    pub contract_id: i32,
    /// Expiration date of the contract
    #[serde(rename = "date_expired")]
    pub date_expired: String,
    /// Ð¡reation date of the contract
    #[serde(rename = "date_issued")]
    pub date_issued: String,
    /// Number of days to perform the contract
    #[serde(rename = "days_to_complete", skip_serializing_if = "Option::is_none")]
    pub days_to_complete: Option<i32>,
    /// End location ID (for Couriers contract)
    #[serde(rename = "end_location_id", skip_serializing_if = "Option::is_none")]
    pub end_location_id: Option<i64>,
    /// true if the contract was issued on behalf of the issuer's corporation
    #[serde(rename = "for_corporation", skip_serializing_if = "Option::is_none")]
    pub for_corporation: Option<bool>,
    /// Character's corporation ID for the issuer
    #[serde(rename = "issuer_corporation_id")]
    pub issuer_corporation_id: i32,
    /// Character ID for the issuer
    #[serde(rename = "issuer_id")]
    pub issuer_id: i32,
    /// Price of contract (for ItemsExchange and Auctions)
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    /// Remuneration for contract (for Couriers only)
    #[serde(rename = "reward", skip_serializing_if = "Option::is_none")]
    pub reward: Option<f64>,
    /// Start location ID (for Couriers contract)
    #[serde(rename = "start_location_id", skip_serializing_if = "Option::is_none")]
    pub start_location_id: Option<i64>,
    /// Title of the contract
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Type of the contract
    #[serde(rename = "type")]
    pub _type: Type,
    /// Volume of items in the contract
    #[serde(rename = "volume", skip_serializing_if = "Option::is_none")]
    pub volume: Option<f64>,
}

impl GetContractsPublicRegionId200Ok {
    /// 200 ok object
    pub fn new(contract_id: i32, date_expired: String, date_issued: String, issuer_corporation_id: i32, issuer_id: i32, _type: Type) -> GetContractsPublicRegionId200Ok {
        GetContractsPublicRegionId200Ok {
            buyout: None,
            collateral: None,
            contract_id,
            date_expired,
            date_issued,
            days_to_complete: None,
            end_location_id: None,
            for_corporation: None,
            issuer_corporation_id,
            issuer_id,
            price: None,
            reward: None,
            start_location_id: None,
            title: None,
            _type,
            volume: None,
        }
    }
}

/// Type of the contract
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "item_exchange")]
    ItemExchange,
    #[serde(rename = "auction")]
    Auction,
    #[serde(rename = "courier")]
    Courier,
    #[serde(rename = "loan")]
    Loan,
}

impl Default for Type {
    fn default() -> Type {
        Self::Unknown
    }
}

