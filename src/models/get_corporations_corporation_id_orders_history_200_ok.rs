/*
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.12
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GetCorporationsCorporationIdOrdersHistory200Ok : 200 ok object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetCorporationsCorporationIdOrdersHistory200Ok {
    /// Number of days the order was valid for (starting from the issued date). An order expires at time issued + duration
    #[serde(rename = "duration")]
    pub duration: i32,
    /// For buy orders, the amount of ISK in escrow
    #[serde(rename = "escrow", skip_serializing_if = "Option::is_none")]
    pub escrow: Option<f64>,
    /// True if the order is a bid (buy) order
    #[serde(rename = "is_buy_order", skip_serializing_if = "Option::is_none")]
    pub is_buy_order: Option<bool>,
    /// Date and time when this order was issued
    #[serde(rename = "issued")]
    pub issued: String,
    /// The character who issued this order
    #[serde(rename = "issued_by", skip_serializing_if = "Option::is_none")]
    pub issued_by: Option<i32>,
    /// ID of the location where order was placed
    #[serde(rename = "location_id")]
    pub location_id: i64,
    /// For buy orders, the minimum quantity that will be accepted in a matching sell order
    #[serde(rename = "min_volume", skip_serializing_if = "Option::is_none")]
    pub min_volume: Option<i32>,
    /// Unique order ID
    #[serde(rename = "order_id")]
    pub order_id: i64,
    /// Cost per unit for this order
    #[serde(rename = "price")]
    pub price: f64,
    /// Valid order range, numbers are ranges in jumps
    #[serde(rename = "range")]
    pub range: Range,
    /// ID of the region where order was placed
    #[serde(rename = "region_id")]
    pub region_id: i32,
    /// Current order state
    #[serde(rename = "state")]
    pub state: State,
    /// The type ID of the item transacted in this order
    #[serde(rename = "type_id")]
    pub type_id: i32,
    /// Quantity of items still required or offered
    #[serde(rename = "volume_remain")]
    pub volume_remain: i32,
    /// Quantity of items required or offered at time order was placed
    #[serde(rename = "volume_total")]
    pub volume_total: i32,
    /// The corporation wallet division used for this order
    #[serde(rename = "wallet_division")]
    pub wallet_division: i32,
}

impl GetCorporationsCorporationIdOrdersHistory200Ok {
    /// 200 ok object
    pub fn new(duration: i32, issued: String, location_id: i64, order_id: i64, price: f64, range: Range, region_id: i32, state: State, type_id: i32, volume_remain: i32, volume_total: i32, wallet_division: i32) -> GetCorporationsCorporationIdOrdersHistory200Ok {
        GetCorporationsCorporationIdOrdersHistory200Ok {
            duration,
            escrow: None,
            is_buy_order: None,
            issued,
            issued_by: None,
            location_id,
            min_volume: None,
            order_id,
            price,
            range,
            region_id,
            state,
            type_id,
            volume_remain,
            volume_total,
            wallet_division,
        }
    }
}

/// Valid order range, numbers are ranges in jumps
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Range {
    #[serde(rename = "1")]
    _1,
    #[serde(rename = "10")]
    _10,
    #[serde(rename = "2")]
    _2,
    #[serde(rename = "20")]
    _20,
    #[serde(rename = "3")]
    _3,
    #[serde(rename = "30")]
    _30,
    #[serde(rename = "4")]
    _4,
    #[serde(rename = "40")]
    _40,
    #[serde(rename = "5")]
    _5,
    #[serde(rename = "region")]
    Region,
    #[serde(rename = "solarsystem")]
    Solarsystem,
    #[serde(rename = "station")]
    Station,
}

impl Default for Range {
    fn default() -> Range {
        Self::_1
    }
}
/// Current order state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "expired")]
    Expired,
}

impl Default for State {
    fn default() -> State {
        Self::Cancelled
    }
}

